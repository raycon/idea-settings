<templateSet group="raegon">
  <template name="at" value="org.assertj.core.api.Assertions.assertThat($END$)" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="be" value="@org.junit.jupiter.api.BeforeEach&#10;void beforeEach() {&#10;  $END$&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="captor" value="@Captor&#10;org.mockito.ArgumentCaptor&lt;$TYPE$&gt; captor;" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="ct" value="Throwable thrown = org.assertj.core.api.Assertions.catchThrowable(() -&gt; {$END$});" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="given" value="org.mockito.BDDMockito.given($MOCK$)$END$" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="MOCK" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="mo" value="@org.junit.jupiter.api.extension.ExtendWith(org.mockito.junit.jupiter.MockitoExtension.class)" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="logv" value="log.info(&quot;$EXPR_COPY$: {}&quot;, $EXPR$);" description="Prints a value to log.info" toReformat="true" toShortenFQNames="true">
    <variable name="EXPR" expression="variableOfType(&quot;&quot;)" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <variable name="EXPR_COPY" expression="escapeString(EXPR)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="logp" value="log.info($FORMAT$);" description="Prints method parameter names and values to System.out" toReformat="true" toShortenFQNames="true">
    <variable name="FORMAT" expression="groovyScript(&quot; import com.intellij.psi.*; import com.intellij.psi.util.PsiTreeUtil; def file = PsiDocumentManager.getInstance(_editor.project).getPsiFile(_editor.document); PsiMethod method = PsiTreeUtil.findElementOfClassAtOffset(file, _editor.caretModel.offset, PsiMethod.class, false); PsiParameter[] parameters = method == null ? PsiParameter.EMPTY_ARRAY : method.parameterList.parameters; return parameters.size() == 0     ? ''     : '\&quot;'       + parameters.collect {         return it.name + ': {}';         }.join(', ')       + '\&quot;, '       + parameters.collect {         return it.name;       }.join(', ') &quot;, methodParameters()) " defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="st" value="$EXPR$.stream()&#10;    $END$" description="stream()" toReformat="true" toShortenFQNames="true">
    <variable name="EXPR" expression="variableOfType(&quot;&quot;)" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>